worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

# Load RTMP module
load_module /usr/lib/nginx/modules/ngx_rtmp_module.so;

events {
    worker_connections 1024;
}

# HTTP block for web interface and WHEP proxy
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;

    # Upstreams for WHEP servers
    upstream whep_backend_1 {
        server ${WHEP_SERVER_1};
    }
    
    upstream whep_backend_2 {
        server ${WHEP_SERVER_2};
    }

    # HTTP server - redirects to HTTPS and handles ACME challenge
    server {
        listen 80;
        server_name ${DOMAIN};

        # ACME challenge location for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/html;
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name ${DOMAIN};

        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        
        # SSL security settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        location / {
            return 200 "NGINX RTMP Server with Dual WHEP Proxy is running (SSL)";
            add_header Content-Type text/plain;
        }

        # WHEP playback proxy for server 1
        location /rtc1/ {
            # Proxy to WHEP server 1
            proxy_pass https://${WHEP_SERVER_1}/rtc/;
            
            # Required headers for WHEP
            proxy_set_header Host ${WHEP_HOST_1};
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebRTC/WHEP specific headers
            proxy_set_header Accept $http_accept;
            proxy_set_header Content-Type $content_type;
            proxy_set_header Authorization $http_authorization;
            
            # Handle CORS for WebRTC
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PATCH, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept";
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range,Location";
            
            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PATCH, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
            
            # SSL settings for upstream
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # WHEP playback proxy for server 2
        location /rtc2/ {
            # Proxy to WHEP server 2
            proxy_pass https://${WHEP_SERVER_2}/rtc/;
            
            # Required headers for WHEP
            proxy_set_header Host ${WHEP_HOST_2};
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebRTC/WHEP specific headers
            proxy_set_header Accept $http_accept;
            proxy_set_header Content-Type $content_type;
            proxy_set_header Authorization $http_authorization;
            
            # Handle CORS for WebRTC
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PATCH, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept";
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range,Location";
            
            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PATCH, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
            
            # SSL settings for upstream
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Default WHEP proxy (points to server 1)
        location /rtc/ {
            # Proxy to WHEP server 1 by default
            proxy_pass https://${WHEP_SERVER_1}/rtc/;
            
            # Required headers for WHEP
            proxy_set_header Host ${WHEP_HOST_1};
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebRTC/WHEP specific headers
            proxy_set_header Accept $http_accept;
            proxy_set_header Content-Type $content_type;
            proxy_set_header Authorization $http_authorization;
            
            # Handle CORS for WebRTC
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PATCH, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept";
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range,Location";
            
            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PATCH, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
            
            # SSL settings for upstream
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Optional: RTMP statistics
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            root /usr/share/nginx/html/;
        }
    }
}

# RTMP block
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        
        application live {
            live on;
            
            # Allow publishing from any IP (configure as needed)
            allow publish all;
            
            # Push to both servers simultaneously
            push rtmp://${ORYX_SERVER_1}/live;
            push rtmp://${ORYX_SERVER_2}/live;
            
            # Optional: Record streams
            # record all;
            # record_path /var/recordings;
            # record_suffix .flv;
            
            # Optional: Allow playback
            allow play all;
        }
        
        # Alternative application for direct proxy
        application proxy {
            live on;
            
            # Only allow publishing
            allow publish all;
            deny play all;
            
            # Push to both servers - this acts like your proxy_pass
            push rtmp://${ORYX_SERVER_1}/live;
            push rtmp://${ORYX_SERVER_2}/live;
        }
        
        # Separate applications for individual servers
        application server1 {
            live on;
            allow publish all;
            deny play all;
            
            # Push only to server 1
            push rtmp://${ORYX_SERVER_1}/live;
        }
        
        application server2 {
            live on;
            allow publish all;
            deny play all;
            
            # Push only to server 2
            push rtmp://${ORYX_SERVER_2}/live;
        }
    }
}